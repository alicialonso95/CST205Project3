import pygame
import time
import random
#initializing modules
#return
#x = pygame.init()
#print (x)
pygame.init()
white = (255,255,255)
purple = (102, 0, 102)
black = (0,0,0)
red = (255,0,0)
blue = (51,51,255)
green = (0,155,0)
orange = (255,150,80)
display_width = 800
display_height = 600
gameDisplay = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption('Snake Game')
pygame.display.update()
#fip is interchangable with update
#snakehead
#img = pygame.image.load('snakehead.png')
clock = pygame.time.Clock()
block_size = 20
#frames per second
FPS = 10
font = pygame.font.SysFont(None,25)
def snake(block_size, snakelist):
    #where?
    #gameDisplay.blit(img, snakelist[-1][0],snakelist[-1][1])
    for XnY in snakelist:#up to
        pygame.draw.rect(gameDisplay, purple, [XnY[0],XnY[1],block_size,block_size])
def text_objects(text,color):
    textSurface = font.render(text, True, color)
    return textSurface, textSurface.get_rect()
def message_to_screen(msg,color):
    textSurf, textRect = text_objects(msg, color)
    #screen_text = font.render(msg, True, color)
    #gameDisplay.blit(screen_text,[display_width/2, display_height/2])
    textRect.center = display_width/2,(display_height/2)
    gameDisplay.blit(textSurf,textRect)
def gameLoop():
    gameExit = False
    gameOver = False
    lead_x = display_width/2
    lead_y = display_height/2
    lead_x_change = 0
    lead_y_change = 0
    snakelist = []
    snakeLength = 1
    randAppleX = round(random.randrange(0,display_width-block_size)/10.0)*10.0
    randAppleY = round(random.randrange(0,display_height-block_size)/10.0)*10.0
    while not gameExit:
        while gameOver == True:
            gameDisplay.fill(black)
            message_to_screen("GAME OVER. Press P to play again or Q to quit.", red)
            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    gameExit = True
                    gameOver = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                        gameExit = True
                        gameOver = False
                if event.key == pygame.K_p:
                        gameLoop()
        #event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gameExit = True
                gameOver = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    lead_x_change = -block_size
                    lead_y_change = 0
                elif event.key == pygame.K_RIGHT:
                    lead_x_change = block_size
                    lead_y_change = 0
                elif event.key == pygame.K_UP:
                    lead_y_change = -block_size
                    lead_x_change = 0
                elif event.key == pygame.K_DOWN:
                    lead_y_change = block_size
                    lead_x_change = 0
                    
            if lead_x >= display_width or lead_x < 0 or lead_y >= display_height or lead_y < 0:
                gameOver = True
        #logic loop
        lead_x += lead_x_change
        lead_y += lead_y_change
        gameDisplay.fill(black)
        AppleThickness = 30
        pygame.draw.rect(gameDisplay,red,[randAppleX, randAppleY,AppleThickness,AppleThickness])
        #pygame.draw.rect(gameDisplay, red, [400,300,10,10])
        #gameDisplay.fill(red, rect=[200,200,50,50])
        #[x, y, width, height]
        #fill is not to totally fill
        #render other graphics
        snakeHead = []
        snakeHead.append(lead_x)
        snakeHead.append(lead_y)
        snakelist.append(snakeHead)
        if len(snakelist) > snakeLength:
            del snakelist[0]
        for eachSegment in snakelist[:-1]:
            if eachSegment == snakeHead:
                gameOver = True
        snake(block_size, snakelist)
        pygame.display.update()
        #reach apple
        if lead_x >= randAppleX and lead_x <= randAppleX + AppleThickness:
#           if lead_y >= randAppleY and lead_y <= randAppleY + AppleThickness:
#               randAppleX = round(random.randrange(0,display_width-block_size))
#               randAppleY = round(random.randrange(0,display_height-block_size))
#               message_to_screen("Level "+str(snakeLength), red)
#               pygame.display.update()
#               time.sleep(.5)
#                snakeLength += 1
#here
            if lead_x > randAppleX and lead_x < randAppleX + AppleThickness or lead_x + block_size > randAppleX and lead_x + block_size < randAppleX + AppleThickness:
                
                if lead_y > randAppleY and lead_y < randAppleY + AppleThickness:
                    
                    randAppleX = round(random.randrange(0,display_width-block_size))
                    randAppleY = round(random.randrange(0,display_height-block_size))
                    message_to_screen("Level "+str(snakeLength), red)
                    pygame.display.update()
                    time.sleep(.5)
                    snakeLength += 1

                elif lead_y + block_size > randAppleY and lead_y + block_size < randAppleY + AppleTickness:

                    randAppleX = round(random.randrange(0,display_width-block_size))
                    randAppleY = round(random.randrange(0,display_height-block_size))
                    message_to_screen("Level "+str(snakeLength), red)
                    pygame.display.update()
                    time.sleep(.5)
                    snakeLength += 1
                clock.tick(FPS +5)
#               clock.tick(FPS)        
    #message_to_screen("You Lose", red)
    #pygame.display.update()
    #time.sleep(2)
    #uninitializing
    pygame.quit()
    #exit out of python
    quit()
gameLoop()


#from the loops to class
#change colors from array
